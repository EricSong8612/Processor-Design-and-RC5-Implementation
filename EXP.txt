ADDI R1,R0,49	//POINTS TO UKEY(K[15])
ADDI R2,R0,50	//POINTS TO EMPTY MEMORY
ADDI R3,R0,0	//COUNTER FOR L[I/U]
ADDI R4,R0,4
ADDI R5,R0,0	//L[]
ADDI R6,R0,0	//RGT FOR K[]

//BEQ R3,R4,6
SHL	R5,R5,8
LW	R6,(R1)
ADDI R1,R1,-1
ADD R5,R5,R6
ADDI R3,R3,1
BLT R3,R4,-6

SW R5,(R2)	//WRITE L[I/U] BACK TO MEM
ADDI R2,R2,1	//MOVE EMPTY MEM POINTER 1 DOWN
ADDI R3,R0,0	//CLEAR R3
ADDI R5,R0,0	//CLEAR R5

//BEQ R3,R4,6
SHL	R5,R5,2
LW	R6,(R1)
ADDI R1,R1,1
ADD R5,R5,R6
ADDI R3,R3,1
BLT R3,R4,-6

SW R5,(R2)	//WRITE L[I/U] BACK TO MEM
ADDI R2,R2,1	//MOVE EMPTY MEM POINTER 1 DOWN
ADDI R3,R0,0	//CLEAR R3
ADDI R5,R0,0	//CLEAR R5

//BEQ R3,R4,5
SHL	R5,R5,8
LW	R6,(R1)
ADDI R1,R1,1
ADD R5,R5,R6
ADDI R3,R3,1
BLT R3,R4,-6

SW R5,(R2)	//WRITE L[I/U] BACK TO MEM
ADDI R2,R2,1	//MOVE EMPTY MEM POINTER 1 DOWN
ADDI R3,R0,0	//CLEAR R3
ADDI R5,R0,0	//CLEAR R5

//BEQ R3,R4,5
SHL	R5,R5,8
LW	R6,(R1)
ADDI R1,R1,1
ADD R5,R5,R6
ADDI R3,R3,1
BLT R3,R4,-6

SW R5,(R2)	//WRITE L[I/U] BACK TO MEM
//ADDI R2,R2,1	//MOVE EMPTY MEM POINTER 1 DOWN

---------------------------------------------------------------
ADDI R2,R0,2	//POINTS TO SKEY[0]
ADDI R3,R0,1	//COUNTER
ADDI R4,R0,26
ADDI R7,R0,0xb7e15163	//R7 = S[i-1]
SW R7, (R2)
ADDI R2,R2,1
ADDI R8,R0,0	//R8 = S[i]

//BEQ	R3,R4,5
ADDI R8,R7,0x9e3779b9	//R8 = S[i-1] + Q
SW	R8,(R2)		//STORE S[i] TO MEM
ADDI R2,R2,1	//MOVE EMPTY MEM POINTER 1 DOWN
ADDI R7,R8,0	//RENEW R7(S[i-1])
BLT R3,R4,-5

---
ADDI R21,R0,0	//COUNTER FOR i
ADDI R22,R0,0	//COUNTER FOR j
ADDI R3,R0,0	//COUNTER FOR k
ADDI R24,R0,26
ADDI R23,R0,4	//c=4
ADDI R4,R0,78
ADDI R9,R0,3	//POINTS TO L[0]
ADDI R10,R0,2	//POINTS TO S[0]
ADDI R11,R0,0	//RGT FOR L[]
ADDI R12,R0,0	//RGT FOR S[]

LW	R12,(R10)	//R12 LOAD S[i] 
LW  R11,(R9)	//R11 LOAD L[J]
ADD R15,R12,R11	//A + B
ADD	R12,R15,R12	//S[i] + A + B

SHL R13,R12,3	//SHIFT LEFT 3
SHR	R14,R12,29	//SHIFT RIGHT 29
OR R12,R13,R14	//GET ROTATED S[i]

SW R12,(R10)

ADD R15, R12,R11	//A+B
ADD R11,R15,R11	//L[j] + A + B

ADDI R16,R0,31
ADDI R17,R0,32

BLT R15, R17,2
SUBI R15, R15, 32
BLT R16,R15,-2

SUB R18,R17,R15	//OVERFLOW BITS

ADDI R19,R0,0	//COUNTER
ADDI R20,R11,0	//COPY R11
BEQ R19,R15,3
SHL R11,R11,1
ADDI R19,R19,1
BLT R19,R15,-3

ADDI R19,R0,0
BEQ R19,R18,3
SHR R20,R20,1
ADDI R19,R19,1
BLT R19,R18,-3

OR R11,R11,R20
SW R11,(R9)

ADDI R21,R21,1	//i++
ADDI R10,R10,1	//POINTER FOR S[i] 1 DOWN
BNE R21, R24,2	//IF i == 26, i=0; POINTER FOR S[I] RETURN TO S[0]
ADDI R21,R0,0
ADDI R10,R0,2	

ADDI R22,R22,1	//j++
ADDI R9,R9,-1
BNE R22, R23,2	//IF j==4,j=0; POINTER FOR L[j] RETURN TO J[0]
ADDI R22,R0,0
ADDI R9, R0, 53

ADDI R3,R3,1	//K++
BNE R3,R4,-41











