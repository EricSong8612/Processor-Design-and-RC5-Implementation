ADDI R1,R0,0
LW R2, (R1)	// A, R2 = CT[0]
ADDI R1,R1,1	//R1 + 1
LW R3,(R1)	// B, R3 = CT[1]
ADDI R5,R0,1	//i = 1
ADDI R6,R0,13	//r = 13
ADDI R1,R0,27	//R1 - 4
LW R4,(R1)		//R4 = S[25]
SUB R3,R4,R3
ADDI R17,R0,31	//R17 = 31
ADDI R15,R0,32	//R15 = 32
ADDI R16,R2,0	//COPY A(R2) TO R16
AND R16,R16,R17
SUB R18,R16,R15 //GET OVERFLOW BITS
ADDI R12,R0,0	//R12 IS COUNTER OF ROTATION
ADDI R19,R3,0  // COPY CURRENT B(R10)
BEQ R12,R16,3	//IF R12 == BLT
SHR R3,R3,1	//SHIFT LEFT BY 1
ADDI R12,R12,1	//R12 += 1
BLT R16,R12,-3	//JUMP
ADDI R12,R0,0	//R12 IS COUNTER OF ROTATION
BEQ R12,R18,3	//IF R12 == BLT
SHL R19,R19,1	//SHIFT RIGHT BY 1
ADDI R12,R12,1	//R12 += 1
BLT R18,R12,-3	//JUMP
OR R3,R3,R19 //CONSTRUCT ROTATED B(R10)
NOR R8,R3,R0	//R8 NOT R3
NOR R9,R2,R0	//R9 NOT A
AND R10, R3,R9
AND R11,R2,R8
OR	R3, R11, R10	//XOR A AND B
ADDI R1,R1,-1
LW R4,(R1)
SUB R2,R4,R2
ADDI R17,R0,31	//R17 = 31
ADDI R15,R0,32	//R15 = 32
ADDI R16,R3,0	//COPY B(R3) TO R16
AND R16,R16,R17
SUB R18,R16,R15 //GET OVERFLOW BITS
ADDI R12,R0,0	//R12 IS COUNTER OF ROTATION
ADDI R19,R2,0  // COPY CURRENT A(R2)
BEQ R12,R16,3	//IF R12 == BLT
SHR R2,R2,1	//SHIFT RIGHT BY 1
ADDI R12,R12,1	//R12 += 1
BLT R16,R12,-3	//JUMP
ADDI R12,R0,0	//R12 IS COUNTER OF ROTATION
BEQ R12,R18,3	//IF R12 == BLT
SHL R19,R19,1	//SHIFT LEFT BY 1
ADDI R12,R12,1	//R12 += 1
BLT R18,R12,-3	//JUMP
OR R2,R2,R19 //CONSTRUCT ROTATED A(R2)
NOR R8,R2,R0	//R8 NOT R2
NOR R9,R3,R0	//R9 NOT B
AND R10, R2,R9
AND R11,R8,R3
OR R2, R11, R10	//XOR A AND B
ADDI R5,R5,1
ADDI R1,R1,-1
BLT R6,R5,-52
ADDI R0,R0,0
LW R4,(R1)	//R4 LOAD S[1]
SUB R3,R4,R3 //FINAL B
ADDI R1,R1,-1
LW R4,(R1) //LOAD S[0]
SUB R2,R4,R2	//FINAL A
ADDI R14,R0,32
SW R2,(R14)
ADDI R14,R0,33
SW R3,(R14)
ADDI R20,R0,34
SW R31,(R20)
BEQ R0,R0,-1
