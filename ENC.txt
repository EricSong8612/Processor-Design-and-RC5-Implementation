LW R2, (R0)	//R2 = PT[0]
ADDI R1，R0，4	//R1 + 4
LW R3，(R1)	//R3 = PT[1]
ADDI R1，R1， 4	//R1+4

LW R4，(R1)	//R4 LOAD S[0]
ADD R2，R2，R4 //A
ADDI R1，R1,4
LW R4，(R1) //LOAD S[1]
ADD R3，R3，R4	//B

ADDI R5,R0，1	//i = 1
ADDI R6,R0，13	//r = 13
ADDI R7,R0,0x11111111	//R7 = 1

NOR R8, R2,R7	//NOT A
NOR R9, R3,R7	//NOT B
AND	R10, R8,R3	//NOT A AND B
AND R11, R9,R2	//NOT B AND A
OR	R10, R11, R10	//XOR A AND B

//DO ROTATION
ADDI R17,R0,31	//R17 = 31
ADDI R15,R0,32	//R15 = 32
ADDI R16,R3,0	//COPY B(R3) TO R16

BLT R16,R15,8	//IF B < 32, JUMP TO LINE 9
SUBI R16,R16,32	//B -= 32
BLT R17,R16,-8	//IF B > 31, JUMP BACK TO LINE 5

SUB R18,R15,R16 //GET OVERFLOW BITS

ADDI R12,R0,0	//R12 IS COUNTER OF ROTATION
ADDI R19,R10,0  // COPY CURRENT A(R10)
BEQ R12,R16,12	//IF R12 == BLT
SHL R10,R10,1	//SHIFT LEFT BY 1
ADDI R12,R12,1	//R12 += 1
BLT R12,R16,-12	//JUMP

ADDI R12,R0,0	//R12 IS COUNTER OF ROTATION
BEQ R12,R18,12	//IF R12 == BLT
SHR R19,R19,1	//SHIFT RIGHT BY 1
ADDI R12,R12,1	//R12 += 1
BLT R12,R18,-12	//JUMP

OR R10,R10,R19 //CONSTRUCT ROTATED A(R10)


ADDI R1,R1,4
LW R4,(R1)
ADD R2,R10,R4	//FINAL A

NOR R8,R2,R7
AND R10,R8,R3
AND R11,R9,R2
OR R10,R11,R10
ADDI R17,R0,31	//R17 = 31
ADDI R15,R0,32	//R15 = 32
ADDI R16,R2,0	//COPY A(R3) TO R16

BLT R16,R15,8	//IF A < 32, JUMP TO LINE 9
SUBI R16,R16,32	//A -= 32
BLT R17,R16,-8	//IF A > 31, JUMP BACK TO LINE 5

SUB R18,R15,R16 //GET OVERFLOW BITS

ADDI R12,R0,0	//R12 IS COUNTER OF ROTATION
ADDI R19,R10,0  // COPY CURRENT B(R10)
BEQ R12,R16,12	//IF R12 == BLT
SHL R10,R10,1	//SHIFT LEFT BY 1
ADDI R12,R12,1	//R12 += 1
BLT R12,R16,-12	//JUMP

ADDI R12,R0,0	//R12 IS COUNTER OF ROTATION
BEQ R12,R18,12	//IF R12 == BLT
SHR R19,R19,1	//SHIFT RIGHT BY 1
ADDI R12,R12,1	//R12 += 1
BLT R12,R18,-12	//JUMP

OR R10,R10,R19 //CONSTRUCT ROTATED B(R10)

ADDI R1,R1,4
LW R4,(R1)
ADD R3,R10,R4
ADDI R5,R5,1
BLT R5,R6,-104

ADDI R14,R0,112
SW R2,(R14)
SW R3,4(R14)